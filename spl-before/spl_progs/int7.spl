alias physicalSP S0;
physicalSP=[PTBR+(2*SP/512)]*512+(SP%512);

alias sysCallNo S1;
sysCallNo=[physicalSP-1];

if(sysCallNo==10) then
alias count S2;
count=0;

alias i S3;

alias pid S4;
pid=(PTBR-1024)/8;

i=0;
while(i<=31) do
if([READY_LIST+32*i+1]==100+pid) then
[READY_LIST+32*i+1]=1;
endif;
i=i+1;
endwhile;


i=0;
while(i<=31) do
if([READY_LIST+32*i+1]==1) then
count=count+1;
endif;
i=i+1;
endwhile;

if(count==0) then
halt;
endif;

i=0;
while(i<=7) do
if([READY_LIST+32*pid+15+2*i]!=-1) then
alias swoftIndex S15;
swoftIndex=[READY_LIST+32*pid+15+2*i];
[FILE_TABLE+2*swoftIndex+1]=[FILE_TABLE+2*swoftIndex+1]-1;
if([FILE_TABLE+2*swoftIndex+1]==0) then
[FILE_TABLE+2*swoftIndex]=-1;
[FILE_TABLE+2*swoftIndex+1]=0;
endif;
[READY_LIST+32*pid+15+2*i]=-1;
[READY_LIST+32*pid+15+2*i+1]=-1;
endif;
i=i+1;
endwhile;

[READY_LIST+32*pid+1]=0;

i=0;
while(i<=3) do
alias k S14;
k=[PTBR+2*i];
alias l S13;
l=[PTBR+2*i+1];
if(l=="01"||l=="11") then
[MEM_LIST+k]=[MEM_LIST+k]-1;
else
if(k>=448) then
[DISK_LIST+k]=[DISK_LIST+k]-1;
store(6,20);
endif;
endif;
i=i+1;
endwhile;

i=0;
while(i<=3) do
[PAGE_TABLE+8*pid+2*i]=-1;
[PAGE_TABLE+8*pid+2*i+1]="00";
i=i+1;
endwhile;


alias nextPID S5;
nextPID=pid+1;

while(nextPID<=32) do
if(nextPID==32) then
nextPID=0;
endif;
if([READY_LIST+32*nextPID+1]==1) then
break;
endif;
nextPID=nextPID+1;
endwhile;

alias newPCB S6;
newPCB=READY_LIST+32*nextPID;




BP=[newPCB+2];
SP=[newPCB+3];
PTBR=[newPCB+5];
PTLR=[newPCB+6];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];

[newPCB+1]=2;

SP=SP+1;
alias newphysicalSP S7;
newphysicalSP=([(SP/512)*2+PTBR]*512)+(SP%512);
[newphysicalSP]=[newPCB+4];



ireturn;

endif;

if(sysCallNo==13) then

alias waitingPID S2;
waitingPID=[physicalSP-3];

if([READY_LIST+32*waitingPID+1]==2) then
[physicalSP-2]=-1;
ireturn;
endif;

if([READY_LIST+32*waitingPID+1]==0) then
[physicalSP-2]=-1;
ireturn;
endif;

alias pid S4;
pid=(PTBR-1024)/8;

alias currentPCB S15;
currentPCB=READY_LIST+(pid*32);

[currentPCB+1]=1;
[currentPCB+2]=BP;
[currentPCB+3]=SP-1;
alias physicalSP1 S14;
physicalSP1=([(SP/512)*2+PTBR]*512)+(SP%512);
[currentPCB+4]=[physicalSP1];
[currentPCB+5]=PTBR;
[currentPCB+6]=PTLR;
[currentPCB+7]=R0;
[currentPCB+8]=R1;
[currentPCB+9]=R2;
[currentPCB+10]=R3;
[currentPCB+11]=R4;
[currentPCB+12]=R5;
[currentPCB+13]=R6;
[currentPCB+14]=R7;

[READY_LIST+32*pid+1]=100+waitingPID;

inline "JMP 12246";

endif;

if(sysCallNo==14) then

alias pid S2;
pid=(PTBR-1024)/8;

alias i S3;
i=0;

while(i<=31) do
if([READY_LIST+32*i+1]==100+pid) then
[READY_LIST+32*i+1]=1;
endif;
i=i+1;
endwhile;

[physicalSP-2]=0;

ireturn;

endif;
